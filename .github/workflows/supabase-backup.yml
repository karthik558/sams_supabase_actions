name: Supabase Backup (env vars)

on:
  workflow_dispatch: {}

jobs:
  dump:
    runs-on: ubuntu-latest
    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_PORT_POOLER: ${{ secrets.DB_PORT_POOLER }}
      DB_PORT_DIRECT: ${{ secrets.DB_PORT_DIRECT }}

    steps:
      - uses: actions/checkout@v4

      - name: Install clients + tools
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client dnsutils netcat-traditional

      - name: Debug DNS and ports
        run: |
          set -x
          dig +short "$DB_HOST" || true
          nc -vz "$DB_HOST" "$DB_PORT_POOLER" || true
          nc -vz "$DB_HOST" "$DB_PORT_DIRECT" || true

      - name: Try pooler (IPv4)
        id: try_pooler
        run: |
          set -e
          export PGPASSWORD="$DB_PASSWORD"
          psql -h "$DB_HOST" -p "$DB_PORT_POOLER" -U "$DB_USER" -d "$DB_NAME" -c "select 1" >/dev/null
          echo "ok=true" >> "$GITHUB_OUTPUT"

      - name: Try direct (fallback)
        if: ${{ failure() }}
        id: try_direct
        run: |
          set -e
          export PGPASSWORD="$DB_PASSWORD"
          psql -h "$DB_HOST" -p "$DB_PORT_DIRECT" -U "$DB_USER" -d "$DB_NAME" -c "select 1" >/dev/null
          echo "ok=true" >> "$GITHUB_OUTPUT"

      - name: Choose working port
        id: pick
        if: always()
        env:
          POOLER_OK: ${{ steps.try_pooler.outputs.ok }}
          DIRECT_OK: ${{ steps.try_direct.outputs.ok }}
        run: |
          if [ "${POOLER_OK}" = "true" ]; then
            echo "port=${DB_PORT_POOLER}" >> "$GITHUB_OUTPUT"
            echo "mode=pooler" >> "$GITHUB_OUTPUT"
          elif [ "${DIRECT_OK}" = "true" ]; then
            echo "port=${DB_PORT_DIRECT}" >> "$GITHUB_OUTPUT"
            echo "mode=direct" >> "$GITHUB_OUTPUT"
          else
            echo "Could not connect with pooler or direct."
            exit 1
          fi

      - name: pg_dump (schema + data + RLS)
        env:
          PORT: ${{ steps.pick.outputs.port }}
        run: |
          set -e
          export PGPASSWORD="$DB_PASSWORD"
          DATE=$(date +%F)
          FILE="backup_${DATE}.dump"
          echo "Dumping from $DB_HOST:$PORT/$DB_NAME ..."
          pg_dump -h "$DB_HOST" -p "$PORT" -U "$DB_USER" -d "$DB_NAME" \
            --format=custom --no-owner --no-privileges --verbose \
            -f "$FILE"
          echo "FILE=$FILE" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: supabase-backup
          path: ${{ env.FILE }}
          retention-days: 7
